name: Firmware Nightly Build

on:
  schedule:
    # Run every night at 3 AM UTC (1 hour after React Native builds)
    - cron: "0 3 * * *"
  workflow_dispatch: # Allow manual triggering

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"

      - name: Install PlatformIO
        run: |
          python -m pip install --upgrade pip
          pip install platformio

      - name: Cache PlatformIO
        uses: actions/cache@v4
        with:
          path: |
            ~/.platformio
            firmware/.pio
          key: ${{ runner.os }}-pio-nightly-${{ hashFiles('firmware/platformio.ini') }}
          restore-keys: |
            ${{ runner.os }}-pio-nightly-

      - name: Build normal firmware
        working-directory: ./firmware
        run: |
          echo "🔨 Building normal firmware..."
          pio run -e esp32dev
          echo "✅ Normal firmware built successfully"

      - name: Build test firmware
        working-directory: ./firmware
        run: |
          echo "🧪 Building test firmware..."
          pio run -e esp32dev_test
          echo "✅ Test firmware built successfully"

      - name: Analyze firmware size
        working-directory: ./firmware
        run: |
          echo "📈 Firmware size analysis:"
          echo "Normal firmware: $(ls -lh .pio/build/esp32dev/firmware.bin | awk '{print $5}')"
          echo "Test firmware: $(ls -lh .pio/build/esp32dev_test/firmware.bin | awk '{print $5}')"

          # Check if firmware size is reasonable (should be under 1MB)
          NORMAL_SIZE_BYTES=$(stat -c%s .pio/build/esp32dev/firmware.bin)
          TEST_SIZE_BYTES=$(stat -c%s .pio/build/esp32dev_test/firmware.bin)

          if [ $NORMAL_SIZE_BYTES -gt 1048576 ]; then
            echo "⚠️  Warning: Normal firmware is larger than 1MB"
          fi

          if [ $TEST_SIZE_BYTES -gt 1048576 ]; then
            echo "⚠️  Warning: Test firmware is larger than 1MB"
          fi

          echo "✅ Size analysis complete"

      - name: Upload firmware artifacts
        uses: actions/upload-artifact@v4
        with:
          name: firmware-nightly-builds
          path: |
            firmware/.pio/build/esp32dev/firmware.bin
            firmware/.pio/build/esp32dev_test/firmware.bin
            firmware/.pio/build/esp32dev/firmware.elf
            firmware/.pio/build/esp32dev_test/firmware.elf
          retention-days: 30 # Keep nightly builds longer

      - name: Create nightly firmware report
        run: |
          echo "🔧 Nightly Firmware Build Report" > firmware-nightly-report.md
          echo "===============================" >> firmware-nightly-report.md
          echo "" >> firmware-nightly-report.md
          echo "## Build Date" >> firmware-nightly-report.md
          echo "$(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> firmware-nightly-report.md
          echo "" >> firmware-nightly-report.md
          echo "## Build Status" >> firmware-nightly-report.md
          echo "- ✅ Normal firmware: Built successfully" >> firmware-nightly-report.md
          echo "- ✅ Test firmware: Built successfully" >> firmware-nightly-report.md
          echo "" >> firmware-nightly-report.md
          echo "## Firmware Sizes" >> firmware-nightly-report.md
          echo "- Normal firmware: $(ls -lh firmware/.pio/build/esp32dev/firmware.bin | awk '{print $5}')" >> firmware-nightly-report.md
          echo "- Test firmware: $(ls -lh firmware/.pio/build/esp32dev_test/firmware.bin | awk '{print $5}')" >> firmware-nightly-report.md
          echo "" >> firmware-nightly-report.md
          echo "## Test Coverage" >> firmware-nightly-report.md
          echo "The test firmware includes tests for:" >> firmware-nightly-report.md
          echo "- Settings initialization" >> firmware-nightly-report.md
          echo "- LED effects initialization" >> firmware-nightly-report.md
          echo "- Throttle reading functionality" >> firmware-nightly-report.md
          echo "- BLE service initialization" >> firmware-nightly-report.md
          echo "- OLED display initialization" >> firmware-nightly-report.md
          echo "" >> firmware-nightly-report.md
          echo "## Next Steps" >> firmware-nightly-report.md
          echo "1. Download firmware from artifacts" >> firmware-nightly-report.md
          echo "2. Upload to ESP32 hardware for testing" >> firmware-nightly-report.md
          echo "3. Monitor serial output for test results" >> firmware-nightly-report.md

      - name: Upload firmware report
        uses: actions/upload-artifact@v4
        with:
          name: firmware-nightly-report
          path: firmware-nightly-report.md
          retention-days: 7

  notify-success:
    needs: [build-and-test]
    runs-on: ubuntu-latest
    if: success()

    steps:
      - name: Notify build success
        run: |
          echo "🎉 Nightly firmware build completed successfully!"
          echo "🔧 Normal firmware: Available in artifacts (firmware-nightly-builds)"
          echo "🧪 Test firmware: Available in artifacts (firmware-nightly-builds)"
          echo "📋 Report: Available in artifacts (firmware-nightly-report)"

  notify-failure:
    needs: [build-and-test]
    runs-on: ubuntu-latest
    if: failure()

    steps:
      - name: Notify build failure
        run: |
          echo "❌ Nightly firmware build failed!"
          echo "Please check the workflow logs for details."
          exit 1
